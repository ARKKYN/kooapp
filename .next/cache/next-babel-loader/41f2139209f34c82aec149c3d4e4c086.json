{"ast":null,"code":"var _jsxFileName = \"/Users/arul/Desktop/load-more-infinite-scroll/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { useInfiniteQuery, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools'; //\n\nimport useIntersectionObserver from '../hooks/useIntersectionObserver';\nconst queryClient = new QueryClient();\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: queryClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Example, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Example() {\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage\n  } = useInfiniteQuery('projects', async ({\n    pageParam = 1\n  }) => {\n    const res = await axios.get('https://gorest.co.in/public/v1/posts?page=' + pageParam);\n    return res.data;\n  }, {\n    getPreviousPageParam: firstPage => {\n      var _firstPage$previousId;\n\n      return (_firstPage$previousId = firstPage.previousId) !== null && _firstPage$previousId !== void 0 ? _firstPage$previousId : false;\n    },\n    getNextPageParam: lastPage => {\n      var _lastPage$nextId;\n\n      return (_lastPage$nextId = lastPage.nextId) !== null && _lastPage$nextId !== void 0 ? _lastPage$nextId : false;\n    }\n  });\n  const loadMoreButtonRef = React.useRef();\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Infinite Loading\"), status === 'loading' ? __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : status === 'error' ? __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Error: \", error.message) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    onClick: () => fetchPreviousPage(),\n    disabled: !hasPreviousPage || isFetchingPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Older' : 'Nothing more to load')), data.pages.map(page => __jsx(React.Fragment, {\n    key: page.nextId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, page.data.map(project => __jsx(\"p\", {\n    style: {\n      border: '1px solid gray',\n      borderRadius: '5px',\n      padding: '10rem 1rem',\n      background: `hsla(${project.id * 30}, 60%, 80%, 1)`\n    },\n    key: project.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, project.name)))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    ref: loadMoreButtonRef,\n    onClick: () => fetchNextPage(),\n    disabled: !hasNextPage || isFetchingNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Newer' : 'Nothing more to load')), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, isFetching && !isFetchingNextPage ? 'Background Updating...' : null)), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), __jsx(Link, {\n    href: \"/about\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Go to another page\")), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arul/Desktop/load-more-infinite-scroll/pages/index.js"],"names":["React","Link","axios","useInfiniteQuery","QueryClient","QueryClientProvider","ReactQueryDevtools","useIntersectionObserver","queryClient","App","Example","status","data","error","isFetching","isFetchingNextPage","isFetchingPreviousPage","fetchNextPage","fetchPreviousPage","hasNextPage","hasPreviousPage","pageParam","res","get","getPreviousPageParam","firstPage","previousId","getNextPageParam","lastPage","nextId","loadMoreButtonRef","useRef","target","onIntersect","enabled","message","pages","map","page","project","border","borderRadius","padding","background","id","name"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Link from 'next/link'\nimport axios from 'axios'\n\nimport { useInfiniteQuery, QueryClient, QueryClientProvider } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\n//\n\nimport useIntersectionObserver from '../hooks/useIntersectionObserver'\n\nconst queryClient = new QueryClient()\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Example />\n    </QueryClientProvider>\n  )\n}\n\nfunction Example() {\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage,\n  } = useInfiniteQuery(\n    'projects',\n    async ({ pageParam = 1 }) => {\n      const res = await axios.get('https://gorest.co.in/public/v1/posts?page=' + pageParam)\n      return res.data\n    },\n    {\n      getPreviousPageParam: firstPage => {\n        return firstPage.previousId ?? false;\n      },\n      getNextPageParam: lastPage => {\n        return lastPage.nextId ?? false;\n      },\n    }\n  )\n\n  const loadMoreButtonRef = React.useRef()\n\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage,\n  })\n\n  return (\n    <div>\n      <h1>Infinite Loading</h1>\n      {status === 'loading' ? (\n        <p>Loading...</p>\n      ) : status === 'error' ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <>\n          <div>\n            <button\n              onClick={() => fetchPreviousPage()}\n              disabled={!hasPreviousPage || isFetchingPreviousPage}\n            >\n              {isFetchingNextPage\n                ? 'Loading more...'\n                : hasNextPage\n                ? 'Load Older'\n                : 'Nothing more to load'}\n            </button>\n          </div>\n          {data.pages.map(page => (\n            <React.Fragment key={page.nextId}>\n              {page.data.map(project => (\n                <p\n                  style={{\n                    border: '1px solid gray',\n                    borderRadius: '5px',\n                    padding: '10rem 1rem',\n                    background: `hsla(${project.id * 30}, 60%, 80%, 1)`,\n                  }}\n                  key={project.id}\n                >\n                  {project.name}\n                </p>\n              ))}\n            </React.Fragment>\n          ))}\n          <div>\n            <button\n              ref={loadMoreButtonRef}\n              onClick={() => fetchNextPage()}\n              disabled={!hasNextPage || isFetchingNextPage}\n            >\n              {isFetchingNextPage\n                ? 'Loading more...'\n                : hasNextPage\n                ? 'Load Newer'\n                : 'Nothing more to load'}\n            </button>\n          </div>\n          <div>\n            {isFetching && !isFetchingNextPage\n              ? 'Background Updating...'\n              : null}\n          </div>\n        </>\n      )}\n      <hr />\n      <Link href=\"/about\">\n        <a>Go to another page</a>\n      </Link>\n      <ReactQueryDevtools initialIsOpen />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}