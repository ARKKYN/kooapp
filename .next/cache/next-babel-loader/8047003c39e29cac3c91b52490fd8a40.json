{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/arul/Desktop/load-more-infinite-scroll/components/Home/Home.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { useInfiniteQuery } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver';\n\nfunction Home() {\n  var _this = this;\n\n  var _useInfiniteQuery = useInfiniteQuery('projects', function _callee(_ref) {\n    var _ref$pageParam, pageParam, res;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref$pageParam = _ref.pageParam, pageParam = _ref$pageParam === void 0 ? \"https://gorest.co.in/public/v1/posts\" : _ref$pageParam;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(pageParam));\n\n          case 3:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, {\n    getPreviousPageParam: function getPreviousPageParam(firstPage) {\n      var _firstPage$meta$pagin;\n\n      return (_firstPage$meta$pagin = firstPage.meta.pagination.links.previous) !== null && _firstPage$meta$pagin !== void 0 ? _firstPage$meta$pagin : false;\n    },\n    getNextPageParam: function getNextPageParam(lastPage) {\n      var _lastPage$meta$pagina;\n\n      return (_lastPage$meta$pagina = lastPage.meta.pagination.links.next) !== null && _lastPage$meta$pagina !== void 0 ? _lastPage$meta$pagina : false;\n    }\n  }),\n      status = _useInfiniteQuery.status,\n      data = _useInfiniteQuery.data,\n      error = _useInfiniteQuery.error,\n      isFetching = _useInfiniteQuery.isFetching,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      isFetchingPreviousPage = _useInfiniteQuery.isFetchingPreviousPage,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      fetchPreviousPage = _useInfiniteQuery.fetchPreviousPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage,\n      hasPreviousPage = _useInfiniteQuery.hasPreviousPage;\n\n  var loadMoreButtonRef = React.useRef();\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"Infinite Loading\"), status === 'loading' ? __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : status === 'error' ? __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Error: \", error.message) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return fetchPreviousPage();\n    },\n    disabled: !hasPreviousPage || isFetchingPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Older' : 'Nothing more to load')), data.pages.map(function (page) {\n    return __jsx(React.Fragment, {\n      key: page.meta.pagination.page + 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, page.data.map(function (project) {\n      console.log(page);\n      console.log(project);\n      return __jsx(\"p\", {\n        style: {\n          border: '1px solid gray',\n          borderRadius: '5px',\n          padding: '10rem 1rem',\n          background: \"hsla(\".concat(project.id * 30, \", 60%, 80%, 1)\")\n        },\n        key: project.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }\n      }, project.title, project.body);\n    }));\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    ref: loadMoreButtonRef,\n    onClick: function onClick() {\n      return fetchNextPage();\n    },\n    disabled: !hasNextPage || isFetchingNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Newer' : 'Nothing more to load')), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, isFetching && !isFetchingNextPage ? 'Background Updating...' : null)), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }), __jsx(Link, {\n    href: \"/about\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"Go to another page\")), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/arul/Desktop/load-more-infinite-scroll/components/Home/Home.jsx"],"names":["Link","axios","useInfiniteQuery","ReactQueryDevtools","useIntersectionObserver","Home","pageParam","get","res","data","getPreviousPageParam","firstPage","meta","pagination","links","previous","getNextPageParam","lastPage","next","status","error","isFetching","isFetchingNextPage","isFetchingPreviousPage","fetchNextPage","fetchPreviousPage","hasNextPage","hasPreviousPage","loadMoreButtonRef","React","useRef","target","onIntersect","enabled","message","pages","map","page","project","console","log","border","borderRadius","padding","background","id","title","body"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,OAAOC,uBAAP,MAAoC,qCAApC;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AAEd,0BAWIH,gBAAgB,CAClB,UADkB,EAElB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCAASI,SAAT,EAASA,SAAT,+BAAqB,sCAArB;AAAA;AAAA,6CACoBL,KAAK,CAACM,GAAN,CAAUD,SAAV,CADpB;;AAAA;AACQE,YAAAA,GADR;AAAA,6CAESA,GAAG,CAACC,IAFb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFkB,EAMlB;AACEC,IAAAA,oBAAoB,EAAE,8BAAAC,SAAS,EAAI;AAAA;;AACjC,sCAAOA,SAAS,CAACC,IAAV,CAAeC,UAAf,CAA0BC,KAA1B,CAAgCC,QAAvC,yEAAmD,KAAnD;AACD,KAHH;AAIEC,IAAAA,gBAAgB,EAAE,0BAAAC,QAAQ,EAAI;AAAA;;AAC5B,sCAAOA,QAAQ,CAACL,IAAT,CAAcC,UAAd,CAAyBC,KAAzB,CAA+BI,IAAtC,yEAA8C,KAA9C;AACD;AANH,GANkB,CAXpB;AAAA,MACEC,MADF,qBACEA,MADF;AAAA,MAEEV,IAFF,qBAEEA,IAFF;AAAA,MAGEW,KAHF,qBAGEA,KAHF;AAAA,MAIEC,UAJF,qBAIEA,UAJF;AAAA,MAKEC,kBALF,qBAKEA,kBALF;AAAA,MAMEC,sBANF,qBAMEA,sBANF;AAAA,MAOEC,aAPF,qBAOEA,aAPF;AAAA,MAQEC,iBARF,qBAQEA,iBARF;AAAA,MASEC,WATF,qBASEA,WATF;AAAA,MAUEC,eAVF,qBAUEA,eAVF;;AA2BA,MAAMC,iBAAiB,GAAGC,KAAK,CAACC,MAAN,EAA1B;AAEA1B,EAAAA,uBAAuB,CAAC;AACtB2B,IAAAA,MAAM,EAAEH,iBADc;AAEtBI,IAAAA,WAAW,EAAER,aAFS;AAGtBS,IAAAA,OAAO,EAAEP;AAHa,GAAD,CAAvB;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEGP,MAAM,KAAK,SAAX,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,GAEGA,MAAM,KAAK,OAAX,GACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAcC,KAAK,CAACc,OAApB,CADE,GAGF,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,OAAO,EAAE;AAAA,aAAMT,iBAAiB,EAAvB;AAAA,KADX;AAEE,IAAA,QAAQ,EAAE,CAACE,eAAD,IAAoBJ,sBAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGD,kBAAkB,GACf,iBADe,GAEfI,WAAW,GACX,YADW,GAEX,sBARN,CADF,CADF,EAaGjB,IAAI,CAAC0B,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI;AAAA,WAClB,MAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAEA,IAAI,CAACzB,IAAL,CAAUC,UAAV,CAAqBwB,IAArB,GAA4B,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAAC5B,IAAL,CAAU2B,GAAV,CAAc,UAAAE,OAAO,EAAI;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,aACA;AACE,QAAA,KAAK,EAAE;AACLG,UAAAA,MAAM,EAAE,gBADH;AAELC,UAAAA,YAAY,EAAE,KAFT;AAGLC,UAAAA,OAAO,EAAE,YAHJ;AAILC,UAAAA,UAAU,iBAAUN,OAAO,CAACO,EAAR,GAAa,EAAvB;AAJL,SADT;AAOE,QAAA,GAAG,EAAEP,OAAO,CAACO,EAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASGP,OAAO,CAACQ,KATX,EAUGR,OAAO,CAACS,IAVX,CADA;AAaA,KAhBD,CADH,CADkB;AAAA,GAAnB,CAbH,EAkCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEnB,iBADP;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMJ,aAAa,EAAnB;AAAA,KAFX;AAGE,IAAA,QAAQ,EAAE,CAACE,WAAD,IAAgBJ,kBAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGA,kBAAkB,GACf,iBADe,GAEfI,WAAW,GACX,YADW,GAEX,sBATN,CADF,CAlCF,EA+CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,UAAU,IAAI,CAACC,kBAAf,GACG,wBADH,GAEG,IAHN,CA/CF,CAPJ,EA6DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7DF,EA8DE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CA9DF,EAiEE,MAAC,kBAAD;AAAoB,IAAA,aAAa,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjEF,CADF;AAqED;;AAED,eAAejB,IAAf","sourcesContent":["import Link from 'next/link'\nimport axios from 'axios'\n\nimport { useInfiniteQuery } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver'\n\nfunction Home() {\n\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage,\n  } = useInfiniteQuery(\n    'projects',\n    async ({ pageParam = \"https://gorest.co.in/public/v1/posts\" }) => {\n      const res = await axios.get(pageParam)\n      return res.data\n    },\n    {\n      getPreviousPageParam: firstPage => {\n        return firstPage.meta.pagination.links.previous ?? false;\n      },\n      getNextPageParam: lastPage => {\n        return lastPage.meta.pagination.links.next ?? false;\n      },\n    }\n  )\n\n  const loadMoreButtonRef = React.useRef()\n\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage,\n  })\n\n  return (\n    <div>\n      <h1>Infinite Loading</h1>\n      {status === 'loading' ? (\n        <p>Loading...</p>\n      ) : status === 'error' ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <>\n          <div>\n            <button\n              onClick={() => fetchPreviousPage()}\n              disabled={!hasPreviousPage || isFetchingPreviousPage}\n            >\n              {isFetchingNextPage\n                ? 'Loading more...'\n                : hasNextPage\n                ? 'Load Older'\n                : 'Nothing more to load'}\n            </button>\n          </div>\n          {data.pages.map(page => (\n            <React.Fragment key={page.meta.pagination.page + 1}>\n              {page.data.map(project => {\n                console.log(page);\n                console.log(project);\n                return (\n                <p\n                  style={{\n                    border: '1px solid gray',\n                    borderRadius: '5px',\n                    padding: '10rem 1rem',\n                    background: `hsla(${project.id * 30}, 60%, 80%, 1)`,\n                  }}\n                  key={project.id}\n                >\n                  {project.title}\n                  {project.body}\n                </p>\n              )})}\n            </React.Fragment>\n          ))}\n          <div>\n            <button\n              ref={loadMoreButtonRef}\n              onClick={() => fetchNextPage()}\n              disabled={!hasNextPage || isFetchingNextPage}\n            >\n              {isFetchingNextPage\n                ? 'Loading more...'\n                : hasNextPage\n                ? 'Load Newer'\n                : 'Nothing more to load'}\n            </button>\n          </div>\n          <div>\n            {isFetching && !isFetchingNextPage\n              ? 'Background Updating...'\n              : null}\n          </div>\n        </>\n      )}\n      <hr />\n      <Link href=\"/about\">\n        <a>Go to another page</a>\n      </Link>\n      <ReactQueryDevtools initialIsOpen />\n    </div>\n  )\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}