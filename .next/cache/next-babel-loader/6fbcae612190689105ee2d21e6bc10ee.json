{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { useInfiniteQuery, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools'; //\n\nimport useIntersectionObserver from '../hooks/useIntersectionObserver';\nconst queryClient = new QueryClient();\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: queryClient\n  }, __jsx(Example, null));\n}\n\nfunction Example() {\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage\n  } = useInfiniteQuery('projects', async ({\n    pageParam = 0\n  }) => {\n    const res = await axios.get('/api/projects?cursor=' + pageParam);\n    return res.data;\n  }, {\n    getPreviousPageParam: firstPage => {\n      var _firstPage$previousId;\n\n      return (_firstPage$previousId = firstPage.previousId) !== null && _firstPage$previousId !== void 0 ? _firstPage$previousId : false;\n    },\n    getNextPageParam: lastPage => {\n      var _lastPage$nextId;\n\n      return (_lastPage$nextId = lastPage.nextId) !== null && _lastPage$nextId !== void 0 ? _lastPage$nextId : false;\n    }\n  });\n  const loadMoreButtonRef = React.useRef();\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"Infinite Loading\"), status === 'loading' ? __jsx(\"p\", null, \"Loading...\") : status === 'error' ? __jsx(\"span\", null, \"Error: \", error.message) : __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"button\", {\n    onClick: () => fetchPreviousPage(),\n    disabled: !hasPreviousPage || isFetchingPreviousPage\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Older' : 'Nothing more to load')), data.pages.map(page => __jsx(React.Fragment, {\n    key: page.nextId\n  }, page.data.map(project => __jsx(\"p\", {\n    style: {\n      border: '1px solid gray',\n      borderRadius: '5px',\n      padding: '10rem 1rem',\n      background: `hsla(${project.id * 30}, 60%, 80%, 1)`\n    },\n    key: project.id\n  }, project.name)))), __jsx(\"div\", null, __jsx(\"button\", {\n    ref: loadMoreButtonRef,\n    onClick: () => fetchNextPage(),\n    disabled: !hasNextPage || isFetchingNextPage\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Newer' : 'Nothing more to load')), __jsx(\"div\", null, isFetching && !isFetchingNextPage ? 'Background Updating...' : null)), __jsx(\"hr\", null), __jsx(Link, {\n    href: \"/about\"\n  }, __jsx(\"a\", null, \"Go to another page\")), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}