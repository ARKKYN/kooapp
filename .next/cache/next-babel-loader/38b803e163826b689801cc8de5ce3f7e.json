{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/arul/Desktop/load-more-infinite-scroll/components/Home/Home.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { useInfiniteQuery } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver';\n\nfunction Home() {\n  var _this = this;\n\n  var _useInfiniteQuery = useInfiniteQuery('projects', function _callee(_ref) {\n    var _ref$pageParam, pageParam, res;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref$pageParam = _ref.pageParam, pageParam = _ref$pageParam === void 0 ? \"https://gorest.co.in/public/v1/posts\" : _ref$pageParam;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(pageParam));\n\n          case 3:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, {\n    getPreviousPageParam: function getPreviousPageParam(firstPage) {\n      var _firstPage$meta$pagin;\n\n      return (_firstPage$meta$pagin = firstPage.meta.pagination.links.previous) !== null && _firstPage$meta$pagin !== void 0 ? _firstPage$meta$pagin : false;\n    },\n    getNextPageParam: function getNextPageParam(lastPage) {\n      var _lastPage$meta$pagina;\n\n      return (_lastPage$meta$pagina = lastPage.meta.pagination.links.next) !== null && _lastPage$meta$pagina !== void 0 ? _lastPage$meta$pagina : false;\n    }\n  }),\n      status = _useInfiniteQuery.status,\n      data = _useInfiniteQuery.data,\n      error = _useInfiniteQuery.error,\n      isFetching = _useInfiniteQuery.isFetching,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage;\n\n  var loadMoreButtonRef = React.useRef();\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"Tweets\"), status === 'loading' ? __jsx(React.Fragment, null) : status === 'error' ? __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Error: \", error.message) : __jsx(React.Fragment, null, data.pages.map(function (page) {\n    return __jsx(React.Fragment, {\n      key: page.meta.pagination.page + 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, page.data.map(function (project) {\n      return __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 19\n        }\n      }, __jsx(\"p\", {\n        style: {\n          border: \"1px solid black\",\n          borderRadius: \"4px\",\n          display: \"block\",\n          width: \"30vw\",\n          margin: \"5px auto\"\n        },\n        key: project.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 19\n        }\n      }, \" \", project.body), __jsx(\"h5\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 18\n        }\n      }, project.title)));\n    }));\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    style: {\n      textAlign: \"center\"\n    },\n    ref: loadMoreButtonRef,\n    onClick: function onClick() {\n      return fetchNextPage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }, isFetchingNextPage ? 'Loading ...' : hasNextPage ? 'Loading ...' : 'Nothing more to load')), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, isFetching && !isFetchingNextPage ? 'Background Updating...' : null)));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/arul/Desktop/load-more-infinite-scroll/components/Home/Home.jsx"],"names":["Link","axios","useInfiniteQuery","ReactQueryDevtools","useIntersectionObserver","Home","pageParam","get","res","data","getPreviousPageParam","firstPage","meta","pagination","links","previous","getNextPageParam","lastPage","next","status","error","isFetching","isFetchingNextPage","fetchNextPage","hasNextPage","loadMoreButtonRef","React","useRef","target","onIntersect","enabled","message","pages","map","page","project","border","borderRadius","display","width","margin","id","body","title","textAlign"],"mappings":"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","sourcesContent":["import Link from 'next/link'\nimport axios from 'axios'\n\nimport { useInfiniteQuery } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver'\n\nfunction Home() {\n\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery(\n    'projects',\n    async ({ pageParam = \"https://gorest.co.in/public/v1/posts\" }) => {\n      const res = await axios.get(pageParam)\n      return res.data\n    },\n    {\n      getPreviousPageParam: firstPage => {\n        return firstPage.meta.pagination.links.previous ?? false;\n      },\n      getNextPageParam: lastPage => {\n        return lastPage.meta.pagination.links.next ?? false;\n      },\n    }\n  )\n\n  const loadMoreButtonRef = React.useRef()\n\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage,\n  })\n\n  return (\n    <div>\n      <h1>Tweets</h1>\n      {status === 'loading' ? (\n        <></>\n      ) : status === 'error' ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <>\n          {data.pages.map(page => (\n            <React.Fragment key={page.meta.pagination.page + 1}>\n              {page.data.map(project => {\n\n                return (\n                  <div>\n                <p\n                  style={{\n                   border: \"1px solid black\",\n                   borderRadius: \"4px\",\n                   display: \"block\",\n                   width: \"30vw\",\n                   margin: \"5px auto\"\n                  }}\n                  key={project.id}\n                >\n                  <span> {project.body}</span>\n                 <h5>{project.title}</h5>\n\n                </p>\n                </div>\n              )})}\n            </React.Fragment>\n          ))}\n          <div>\n              <p style={{textAlign : \"center\"}}   ref={loadMoreButtonRef} onClick={() => fetchNextPage()}>\n              {isFetchingNextPage\n                ? 'Loading ...'\n                : hasNextPage\n                ? 'Loading ...'\n                : 'Nothing more to load'}\n            </p>\n          </div>\n          <div>\n            {isFetching && !isFetchingNextPage\n              ? 'Background Updating...'\n              : null}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}