{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { useInfiniteQuery, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools'; //\n\nimport useIntersectionObserver from '../hooks/useIntersectionObserver';\nvar queryClient = new QueryClient();\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: queryClient\n  }, __jsx(Example, null));\n}\n\nfunction Example() {\n  var _useInfiniteQuery = useInfiniteQuery('projects', function _callee(_ref) {\n    var _ref$pageParam, pageParam, res;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref$pageParam = _ref.pageParam, pageParam = _ref$pageParam === void 0 ? 0 : _ref$pageParam;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get('/api/projects?cursor=' + pageParam));\n\n          case 3:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, {\n    getPreviousPageParam: function getPreviousPageParam(firstPage) {\n      var _firstPage$previousId;\n\n      return (_firstPage$previousId = firstPage.previousId) !== null && _firstPage$previousId !== void 0 ? _firstPage$previousId : false;\n    },\n    getNextPageParam: function getNextPageParam(lastPage) {\n      var _lastPage$nextId;\n\n      return (_lastPage$nextId = lastPage.nextId) !== null && _lastPage$nextId !== void 0 ? _lastPage$nextId : false;\n    }\n  }),\n      status = _useInfiniteQuery.status,\n      data = _useInfiniteQuery.data,\n      error = _useInfiniteQuery.error,\n      isFetching = _useInfiniteQuery.isFetching,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      isFetchingPreviousPage = _useInfiniteQuery.isFetchingPreviousPage,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      fetchPreviousPage = _useInfiniteQuery.fetchPreviousPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage,\n      hasPreviousPage = _useInfiniteQuery.hasPreviousPage;\n\n  var loadMoreButtonRef = React.useRef();\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"Infinite Loading\"), status === 'loading' ? __jsx(\"p\", null, \"Loading...\") : status === 'error' ? __jsx(\"span\", null, \"Error: \", error.message) : __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(\"button\", {\n    onClick: function onClick() {\n      return fetchPreviousPage();\n    },\n    disabled: !hasPreviousPage || isFetchingPreviousPage\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Older' : 'Nothing more to load')), data.pages.map(function (page) {\n    return __jsx(React.Fragment, {\n      key: page.nextId\n    }, page.data.map(function (project) {\n      return __jsx(\"p\", {\n        style: {\n          border: '1px solid gray',\n          borderRadius: '5px',\n          padding: '10rem 1rem',\n          background: \"hsla(\".concat(project.id * 30, \", 60%, 80%, 1)\")\n        },\n        key: project.id\n      }, project.name);\n    }));\n  }), __jsx(\"div\", null, __jsx(\"button\", {\n    ref: loadMoreButtonRef,\n    onClick: function onClick() {\n      return fetchNextPage();\n    },\n    disabled: !hasNextPage || isFetchingNextPage\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Newer' : 'Nothing more to load')), __jsx(\"div\", null, isFetching && !isFetchingNextPage ? 'Background Updating...' : null)), __jsx(\"hr\", null), __jsx(Link, {\n    href: \"/about\"\n  }, __jsx(\"a\", null, \"Go to another page\")), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}