{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/arul/Desktop/load-more-infinite-scroll/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { useInfiniteQuery, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools'; //\n\nimport useIntersectionObserver from '../hooks/useIntersectionObserver';\nvar queryClient = new QueryClient();\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: queryClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Example, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Example() {\n  var _this = this;\n\n  var _useInfiniteQuery = useInfiniteQuery('projects', function _callee(_ref) {\n    var _ref$pageParam, pageParam, res;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref$pageParam = _ref.pageParam, pageParam = _ref$pageParam === void 0 ? 0 : _ref$pageParam;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get('https://gorest.co.in/public/v1/posts?page=' + pageParam));\n\n          case 3:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, {\n    getPreviousPageParam: function getPreviousPageParam(firstPage) {\n      var _firstPage$previousId;\n\n      console.log(firstPage);\n      return (_firstPage$previousId = firstPage.previousId) !== null && _firstPage$previousId !== void 0 ? _firstPage$previousId : false;\n    },\n    getNextPageParam: function getNextPageParam(lastPage) {\n      var _lastPage$nextId;\n\n      console.log(lastPage);\n      return (_lastPage$nextId = lastPage.nextId) !== null && _lastPage$nextId !== void 0 ? _lastPage$nextId : false;\n    }\n  }),\n      status = _useInfiniteQuery.status,\n      data = _useInfiniteQuery.data,\n      error = _useInfiniteQuery.error,\n      isFetching = _useInfiniteQuery.isFetching,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      isFetchingPreviousPage = _useInfiniteQuery.isFetchingPreviousPage,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      fetchPreviousPage = _useInfiniteQuery.fetchPreviousPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage,\n      hasPreviousPage = _useInfiniteQuery.hasPreviousPage;\n\n  var loadMoreButtonRef = React.useRef();\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"Infinite Loading\"), status === 'loading' ? __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : status === 'error' ? __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Error: \", error.message) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return fetchPreviousPage();\n    },\n    disabled: !hasPreviousPage || isFetchingPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Older' : 'Nothing more to load')), data.pages.map(function (page) {\n    return __jsx(React.Fragment, {\n      key: page.nextId,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, page.data.map(function (project) {\n      return __jsx(\"p\", {\n        style: {\n          border: '1px solid gray',\n          borderRadius: '5px',\n          padding: '10rem 1rem',\n          background: \"hsla(\".concat(project.id * 30, \", 60%, 80%, 1)\")\n        },\n        key: project.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, project.name);\n    }));\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    ref: loadMoreButtonRef,\n    onClick: function onClick() {\n      return fetchNextPage();\n    },\n    disabled: !hasNextPage || isFetchingNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Newer' : 'Nothing more to load')), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, isFetching && !isFetchingNextPage ? 'Background Updating...' : null)), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), __jsx(Link, {\n    href: \"/about\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Go to another page\")), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arul/Desktop/load-more-infinite-scroll/pages/index.js"],"names":["React","Link","axios","useInfiniteQuery","QueryClient","QueryClientProvider","ReactQueryDevtools","useIntersectionObserver","queryClient","App","Example","pageParam","get","res","data","getPreviousPageParam","firstPage","console","log","previousId","getNextPageParam","lastPage","nextId","status","error","isFetching","isFetchingNextPage","isFetchingPreviousPage","fetchNextPage","fetchPreviousPage","hasNextPage","hasPreviousPage","loadMoreButtonRef","useRef","target","onIntersect","enabled","message","pages","map","page","project","border","borderRadius","padding","background","id","name"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Link from 'next/link'\nimport axios from 'axios'\n\nimport { useInfiniteQuery, QueryClient, QueryClientProvider } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\n//\n\nimport useIntersectionObserver from '../hooks/useIntersectionObserver'\n\nconst queryClient = new QueryClient()\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Example />\n    </QueryClientProvider>\n  )\n}\n\nfunction Example() {\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage,\n  } = useInfiniteQuery(\n    'projects',\n    async ({ pageParam = 0 }) => {\n      const res = await axios.get('https://gorest.co.in/public/v1/posts?page=' + pageParam)\n      return res.data\n    },\n    {\n      getPreviousPageParam: firstPage => {\n        console.log(firstPage);\n        return firstPage.previousId ?? false;\n      },\n      getNextPageParam: lastPage => {\n        console.log(lastPage);\n        return lastPage.nextId ?? false;\n      },\n    }\n  )\n\n  const loadMoreButtonRef = React.useRef()\n\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage,\n  })\n\n  return (\n    <div>\n      <h1>Infinite Loading</h1>\n      {status === 'loading' ? (\n        <p>Loading...</p>\n      ) : status === 'error' ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <>\n          <div>\n            <button\n              onClick={() => fetchPreviousPage()}\n              disabled={!hasPreviousPage || isFetchingPreviousPage}\n            >\n              {isFetchingNextPage\n                ? 'Loading more...'\n                : hasNextPage\n                ? 'Load Older'\n                : 'Nothing more to load'}\n            </button>\n          </div>\n          {data.pages.map(page => (\n            <React.Fragment key={page.nextId}>\n              {page.data.map(project => (\n                <p\n                  style={{\n                    border: '1px solid gray',\n                    borderRadius: '5px',\n                    padding: '10rem 1rem',\n                    background: `hsla(${project.id * 30}, 60%, 80%, 1)`,\n                  }}\n                  key={project.id}\n                >\n                  {project.name}\n                </p>\n              ))}\n            </React.Fragment>\n          ))}\n          <div>\n            <button\n              ref={loadMoreButtonRef}\n              onClick={() => fetchNextPage()}\n              disabled={!hasNextPage || isFetchingNextPage}\n            >\n              {isFetchingNextPage\n                ? 'Loading more...'\n                : hasNextPage\n                ? 'Load Newer'\n                : 'Nothing more to load'}\n            </button>\n          </div>\n          <div>\n            {isFetching && !isFetchingNextPage\n              ? 'Background Updating...'\n              : null}\n          </div>\n        </>\n      )}\n      <hr />\n      <Link href=\"/about\">\n        <a>Go to another page</a>\n      </Link>\n      <ReactQueryDevtools initialIsOpen />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}