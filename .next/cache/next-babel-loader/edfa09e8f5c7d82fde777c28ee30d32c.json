{"ast":null,"code":"import React from 'react';\nexport default function useIntersectionObserver({\n  root,\n  target,\n  onIntersect,\n  threshold = 1.0,\n  rootMargin = '0px',\n  enabled = true\n}) {\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const observer = new IntersectionObserver(entries => entries.forEach(entry => entry.isIntersecting && onIntersect()), {\n      root: root && root.current,\n      rootMargin,\n      threshold\n    });\n    const el = target && target.current;\n\n    if (!el) {\n      return;\n    }\n\n    observer.observe(el);\n    return () => {\n      observer.unobserve(el);\n    };\n  }, [target.current, enabled]);\n}","map":{"version":3,"sources":["/Users/arul/Desktop/load-more-infinite-scroll/hooks/useIntersectionObserver.js"],"names":["React","useIntersectionObserver","root","target","onIntersect","threshold","rootMargin","enabled","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","current","el","observe","unobserve"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,uBAAT,CAAiC;AAC9CC,EAAAA,IAD8C;AAE9CC,EAAAA,MAF8C;AAG9CC,EAAAA,WAH8C;AAI9CC,EAAAA,SAAS,GAAG,GAJkC;AAK9CC,EAAAA,UAAU,GAAG,KALiC;AAM9CC,EAAAA,OAAO,GAAG;AANoC,CAAjC,EAOZ;AACDP,EAAAA,KAAK,CAACQ,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACD,OAAL,EAAc;AACZ;AACD;;AAED,UAAME,QAAQ,GAAG,IAAIC,oBAAJ,CACfC,OAAO,IACLA,OAAO,CAACC,OAAR,CAAgBC,KAAK,IAAIA,KAAK,CAACC,cAAN,IAAwBV,WAAW,EAA5D,CAFa,EAGf;AACEF,MAAAA,IAAI,EAAEA,IAAI,IAAIA,IAAI,CAACa,OADrB;AAEET,MAAAA,UAFF;AAGED,MAAAA;AAHF,KAHe,CAAjB;AAUA,UAAMW,EAAE,GAAGb,MAAM,IAAIA,MAAM,CAACY,OAA5B;;AAEA,QAAI,CAACC,EAAL,EAAS;AACP;AACD;;AAEDP,IAAAA,QAAQ,CAACQ,OAAT,CAAiBD,EAAjB;AAEA,WAAO,MAAM;AACXP,MAAAA,QAAQ,CAACS,SAAT,CAAmBF,EAAnB;AACD,KAFD;AAGD,GA1BD,EA0BG,CAACb,MAAM,CAACY,OAAR,EAAiBR,OAAjB,CA1BH;AA2BD","sourcesContent":["import React from 'react'\n\nexport default function useIntersectionObserver({\n  root,\n  target,\n  onIntersect,\n  threshold = 1.0,\n  rootMargin = '0px',\n  enabled = true,\n}) {\n  React.useEffect(() => {\n    if (!enabled) {\n      return\n    }\n\n    const observer = new IntersectionObserver(\n      entries =>\n        entries.forEach(entry => entry.isIntersecting && onIntersect()),\n      {\n        root: root && root.current,\n        rootMargin,\n        threshold,\n      }\n    )\n\n    const el = target && target.current\n\n    if (!el) {\n      return\n    }\n\n    observer.observe(el)\n\n    return () => {\n      observer.unobserve(el)\n    }\n  }, [target.current, enabled])\n}\n"]},"metadata":{},"sourceType":"module"}