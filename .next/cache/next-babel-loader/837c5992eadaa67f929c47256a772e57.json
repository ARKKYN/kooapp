{"ast":null,"code":"var _jsxFileName = \"/Users/arul/Desktop/load-more-infinite-scroll/components/Home/Home.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { useInfiniteQuery } from 'react-query';\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver';\n\nfunction Home() {\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage\n  } = useInfiniteQuery('projects', async ({\n    pageParam = \"https://gorest.co.in/public/v1/posts\"\n  }) => {\n    const res = await axios.get(pageParam);\n    return res.data;\n  }, {\n    getPreviousPageParam: firstPage => {\n      var _firstPage$meta$pagin;\n\n      return (_firstPage$meta$pagin = firstPage.meta.pagination.links.previous) !== null && _firstPage$meta$pagin !== void 0 ? _firstPage$meta$pagin : false;\n    },\n    getNextPageParam: lastPage => {\n      var _lastPage$meta$pagina;\n\n      return (_lastPage$meta$pagina = lastPage.meta.pagination.links.next) !== null && _lastPage$meta$pagina !== void 0 ? _lastPage$meta$pagina : false;\n    }\n  });\n  const loadMoreButtonRef = React.useRef();\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Tweets\"), status === 'loading' ? __jsx(React.Fragment, null) : status === 'error' ? __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Error: \", error.message) : __jsx(React.Fragment, null, data.pages.map(page => __jsx(React.Fragment, {\n    key: page.meta.pagination.page + 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, page.data.map(project => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }\n    }, __jsx(\"p\", {\n      style: {\n        border: \"1px solid black\",\n        borderRadius: \"4px\",\n        display: \"block\",\n        width: \"30vw\",\n        margin: \"5px auto\"\n      },\n      key: project.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 19\n      }\n    }, \" \", project.body), __jsx(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 18\n      }\n    }, project.title)));\n  }))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    style: {\n      display: \"block\",\n      margin: \"0px auto\"\n    },\n    ref: loadMoreButtonRef,\n    onClick: fetchNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, isFetchingNextPage ? 'Loading ...' : hasNextPage ? 'Loading ...' : 'Nothing more to load')), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, isFetching && !isFetchingNextPage ? 'Background Updating...' : null)));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/arul/Desktop/load-more-infinite-scroll/components/Home/Home.jsx"],"names":["Link","axios","useInfiniteQuery","useIntersectionObserver","Home","status","data","error","isFetching","isFetchingNextPage","fetchNextPage","hasNextPage","pageParam","res","get","getPreviousPageParam","firstPage","meta","pagination","links","previous","getNextPageParam","lastPage","next","loadMoreButtonRef","React","useRef","target","onIntersect","enabled","message","pages","map","page","project","border","borderRadius","display","width","margin","id","body","title"],"mappings":"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","sourcesContent":["import Link from 'next/link'\nimport axios from 'axios'\n\nimport { useInfiniteQuery } from 'react-query'\n\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver'\n\nfunction Home() {\n\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery(\n    'projects',\n    async ({ pageParam = \"https://gorest.co.in/public/v1/posts\" }) => {\n      const res = await axios.get(pageParam)\n      return res.data\n    },\n    {\n      getPreviousPageParam: firstPage => {\n        return firstPage.meta.pagination.links.previous ?? false;\n      },\n      getNextPageParam: lastPage => {\n        return lastPage.meta.pagination.links.next ?? false;\n      },\n    }\n  )\n\n  const loadMoreButtonRef = React.useRef()\n\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage,\n  })\n\n  return (\n    <div>\n      <h1>Tweets</h1>\n      {status === 'loading' ? (\n        <></>\n      ) : status === 'error' ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <>\n          {data.pages.map(page => (\n            <React.Fragment key={page.meta.pagination.page + 1}>\n              {page.data.map(project => {\n\n                return (\n                  <div>\n                <p\n                  style={{\n                   border: \"1px solid black\",\n                   borderRadius: \"4px\",\n                   display: \"block\",\n                   width: \"30vw\",\n                   margin: \"5px auto\"\n                  }}\n                  key={project.id}\n                >\n                  <span> {project.body}</span>\n                 <h5>{project.title}</h5>\n\n                </p>\n                </div>\n              )})}\n            </React.Fragment>\n          ))}\n          <div>\n              <button style={{display : \"block\", margin: \"0px auto\"}}   ref={loadMoreButtonRef} onClick={fetchNextPage}>\n              {isFetchingNextPage\n                ? 'Loading ...'\n                : hasNextPage\n                ? 'Loading ...'\n                : 'Nothing more to load'}\n            </button>\n          </div>\n          <div>\n            {isFetching && !isFetchingNextPage\n              ? 'Background Updating...'\n              : null}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}