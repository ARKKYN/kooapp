{"ast":null,"code":"var _jsxFileName = \"/Users/arul/Desktop/load-more-infinite-scroll/components/Home/Home.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { useInfiniteQuery } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver';\n\nfunction Home() {\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage\n  } = useInfiniteQuery('projects', async ({\n    pageParam = \"https://gorest.co.in/public/v1/posts\"\n  }) => {\n    const res = await axios.get(pageParam);\n    return res.data;\n  }, {\n    getPreviousPageParam: firstPage => {\n      var _firstPage$meta$pagin;\n\n      return (_firstPage$meta$pagin = firstPage.meta.pagination.links.previous) !== null && _firstPage$meta$pagin !== void 0 ? _firstPage$meta$pagin : false;\n    },\n    getNextPageParam: lastPage => {\n      var _lastPage$meta$pagina;\n\n      return (_lastPage$meta$pagina = lastPage.meta.pagination.links.next) !== null && _lastPage$meta$pagina !== void 0 ? _lastPage$meta$pagina : false;\n    }\n  });\n  const loadMoreButtonRef = React.useRef();\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"Infinite Loading\"), status === 'loading' ? __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : status === 'error' ? __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Error: \", error.message) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    onClick: () => fetchPreviousPage(),\n    disabled: !hasPreviousPage || isFetchingPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, isFetchingNextPage ? 'Loading more...' : hasNextPage ? 'Load Older' : 'Nothing more to load')), data.pages.map(page => __jsx(React.Fragment, {\n    key: page.meta.pagination.page + 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, page.data.map(project => {\n    console.log(page);\n    console.log(project);\n    return __jsx(\"div\", {\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }, __jsx(\"p\", {\n      style: {\n        border: \"1px solid black\",\n        borderRadius: \"4px\",\n        display: \"block\",\n        width: \"30vw\",\n        margin: \"5px auto\"\n      },\n      key: project.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, \" \", project.body), __jsx(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 18\n      }\n    }, project.title)));\n  }))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, isFetchingNextPage ? 'Loading ...' : hasNextPage ? 'Loading ...' : 'Nothing more to load')), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, isFetching && !isFetchingNextPage ? 'Background Updating...' : null)));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/arul/Desktop/load-more-infinite-scroll/components/Home/Home.jsx"],"names":["Link","axios","useInfiniteQuery","ReactQueryDevtools","useIntersectionObserver","Home","status","data","error","isFetching","isFetchingNextPage","isFetchingPreviousPage","fetchNextPage","fetchPreviousPage","hasNextPage","hasPreviousPage","pageParam","res","get","getPreviousPageParam","firstPage","meta","pagination","links","previous","getNextPageParam","lastPage","next","loadMoreButtonRef","React","useRef","target","onIntersect","enabled","message","pages","map","page","project","console","log","display","border","borderRadius","width","margin","id","body","title","textAlign"],"mappings":"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","sourcesContent":["import Link from 'next/link'\nimport axios from 'axios'\n\nimport { useInfiniteQuery } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver'\n\nfunction Home() {\n\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage,\n  } = useInfiniteQuery(\n    'projects',\n    async ({ pageParam = \"https://gorest.co.in/public/v1/posts\" }) => {\n      const res = await axios.get(pageParam)\n      return res.data\n    },\n    {\n      getPreviousPageParam: firstPage => {\n        return firstPage.meta.pagination.links.previous ?? false;\n      },\n      getNextPageParam: lastPage => {\n        return lastPage.meta.pagination.links.next ?? false;\n      },\n    }\n  )\n\n  const loadMoreButtonRef = React.useRef()\n\n  useIntersectionObserver({\n    target: loadMoreButtonRef,\n    onIntersect: fetchNextPage,\n    enabled: hasNextPage,\n  })\n\n  return (\n    <div>\n      <h1>Infinite Loading</h1>\n      {status === 'loading' ? (\n        <p>Loading...</p>\n      ) : status === 'error' ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <>\n          <div>\n            <button\n              onClick={() => fetchPreviousPage()}\n              disabled={!hasPreviousPage || isFetchingPreviousPage}\n            >\n              {isFetchingNextPage\n                ? 'Loading more...'\n                : hasNextPage\n                ? 'Load Older'\n                : 'Nothing more to load'}\n            </button>\n          </div>\n          {data.pages.map(page => (\n            <React.Fragment key={page.meta.pagination.page + 1}>\n              {page.data.map(project => {\n                console.log(page);\n                console.log(project);\n                return (\n                  <div style={{display: \"none\"}}>\n                <p\n                  style={{\n                   border: \"1px solid black\",\n                   borderRadius: \"4px\",\n                   display: \"block\",\n                   width: \"30vw\",\n                   margin: \"5px auto\"\n                  }}\n                  key={project.id}\n                >\n                  <p> {project.body}</p>\n                 <h5>{project.title}</h5>\n\n                </p>\n                </div>\n              )})}\n            </React.Fragment>\n          ))}\n          <div>\n              <p style={{textAlign : \"center\"}}>\n              {isFetchingNextPage\n                ? 'Loading ...'\n                : hasNextPage\n                ? 'Loading ...'\n                : 'Nothing more to load'}\n            </p>\n          </div>\n          <div>\n            {isFetching && !isFetchingNextPage\n              ? 'Background Updating...'\n              : null}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}